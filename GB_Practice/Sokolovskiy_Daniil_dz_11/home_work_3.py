# 3. Создать собственный класс-исключение, который должен проверять содержимое списка на
# наличие только чисел. Проверить работу исключения на реальном примере. Запрашивать у
# пользователя данные и заполнять список необходимо только числами. Класс-исключение
# должен контролировать типы данных элементов списка.
# Примечание: длина списка не фиксирована. Элементы запрашиваются бесконечно, пока
# пользователь сам не остановит работу скрипта, введя, например, команду «stop». При этом
# скрипт завершается, сформированный список с числами выводится на экран.
# Подсказка: для этого задания примем, что пользователь может вводить только числа и
# строки. Во время ввода пользователем очередного элемента необходимо реализовать
# проверку типа элемента. Вносить его в список, только если введено число. Класс-исключение
# должен не позволить пользователю ввести текст (не число) и отобразить соответствующее
# сообщение. При этом работа скрипта не должна завершаться.

print('Решение задачи №3')

my_list = []
inp_data = 0
count = 1


class OwnError(ValueError):
    def __init__(self, val):
        self.val = val


while inp_data != 'stop':
    inp_data = input(f'Введите {count}-е число или для отсановки "stop": ')
    try:
        if inp_data.isdigit() or inp_data.replace('.', '').isdigit():
            my_list.append(inp_data)
            count += 1
        elif inp_data.lower() == 'stop':
            continue
        else:
            raise OwnError('Вы ввели не число!')
    except OwnError as err:
        print(err)

print(f'Ваши числа: {my_list}')
